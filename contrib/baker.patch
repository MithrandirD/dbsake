Minor patches to Baker 1.3 to add two features:
    * Support dashes in option names to subcommands
    * Report "No such command" separately from "No command specified"
    * add new multiopts option for commands to allow an option to be
      specified multiple times (e.g. --table foo --table bar ...)
      and provided to the command as a list
--- baker.py	2014-01-23 06:28:44.898000000 +0000
+++ dbsake/baker.py	2014-01-17 05:21:51.149000000 +0000
@@ -38,7 +38,8 @@
 
 
 # Stores metadata about a command
-Cmd = namedtuple("Cmd", ["name", "fn", "argnames", "keywords", "shortopts",
+Cmd = namedtuple("Cmd", ["name", "fn", "argnames", "keywords",
+                         "shortopts", "multiopts",
                          "has_varargs", "has_kwargs", "docstring",
                          "varargs_name", "paramdocs", "is_method"])
 
@@ -221,7 +222,8 @@
         return self.global_options.get(key, default)
 
     def command(self, fn=None, name=None, default=False,
-                params=None, shortopts=None, global_command=False):
+                params=None, shortopts=None, multiopts=None,
+                global_command=False):
         """
         Registers a command with the bakery. This does not call the
         function, it simply adds it to the list of functions this Baker
@@ -256,6 +258,7 @@
                                            name=name,
                                            params=params,
                                            shortopts=shortopts,
+                                           multiopts=multiopts,
                                            global_command=global_command)
         else:
             name = name or fn.__name__
@@ -284,6 +287,8 @@
             # Automatically add single letter arguments as shortopts
             shortopts.update(((arg, arg) for arg in arglist if len(arg) == 1))
 
+            multiopts = set(multiopts or ())
+
             # Zip up the keyword argument names with their defaults
             if defaults:
                 keywords = dict(zip(arglist[0 - len(defaults):], defaults))
@@ -297,8 +302,9 @@
                 arglist.pop(0)
 
             # Create a Cmd object to represent this command and store it
-            cmd = Cmd(name, fn, arglist, keywords, shortopts, has_varargs,
-                      has_kwargs, docstring, varargs_name, params, is_method)
+            cmd = Cmd(name, fn, arglist, keywords, shortopts, multiopts,
+                      has_varargs, has_kwargs, docstring, varargs_name, params,
+                      is_method)
             # If global_command is True, set this as the global command
             if global_command:
                 if defaults is not None and len(defaults) != len(arglist):
@@ -501,7 +507,7 @@
         """
         Returns the heading of the given command.
         """
-        head = " --" + keyname
+        head = " --" + keyname.replace('_', '-')
         if keyname in cmd.shortopts:
             head = " -" + cmd.shortopts[keyname] + head
         head += "  "
@@ -600,6 +606,7 @@
         """
         keywords = cmd.keywords
         shortopts = cmd.shortopts
+        multiopts = cmd.multiopts
 
         def type_error(name, value, t):
             if not test:
@@ -679,7 +686,10 @@
                             type_error(name, value, type(default))
 
                 # Store this option
-                kwargs[name] = value
+                if name in cmd.multiopts:
+                    kwargs.setdefault(name, []).append(value)
+                else:
+                    kwargs[name] = value
 
             elif arg.startswith("-") and (cmd.shortopts or cmd.has_kwargs):
                 # Process short option(s)
@@ -720,9 +730,13 @@
                         value = value.lstrip("=").strip("'\"")
 
                         try:
-                            kwargs[name] = totype(value, default)
+                            value = totype(value, default)
                         except (TypeError, ValueError):
                             type_error(name, value, type(default))
+                        if name in cmd.multiopts:
+                            kwargs.setdefault(name, []).append(value)
+                        else:
+                            kwargs[name] = value
                         break
             else:
                 # This doesn't start with "-", so just add it to the list of
@@ -796,6 +810,8 @@
             self.global_options = self.apply(scriptname, self.globalcommand,
                                              args, kwargs)
             cmd = self.commands[argv[i]]
+        elif argv_len > 1 and argv[1] not in self.commands:
+            raise CommandError("%s: No such command %s" % (scriptname, argv[1]), scriptname, cmd=argv[1])
         else:
             raise CommandError("No command specified", scriptname)
 
@@ -817,7 +833,8 @@
 
         # Rearrange the arguments into the order Python expects
         newargs = []
-        newkwargs = kwargs.copy()
+        newkwargs = dict((key.replace('-', '_'), value)
+                         for key, value in kwargs.items())
         for name in cmd.argnames:
             if name in cmd.keywords:
                 if not args:
